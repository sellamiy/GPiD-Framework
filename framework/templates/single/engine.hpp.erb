/**
 * \file gpid/solver-interfaces/<%= @solver.name %>_engine.hpp
 * \brief <%= @solver.name %> Solver Interface Classes.
 * \author Yanis Sellami
 * \date 2017
 */
#ifndef GPID_<%= @solver.name %>_ENGINE_INTERFACE_HPP
#define GPID_<%= @solver.name %>_ENGINE_INTERFACE_HPP

#include <gpid/core/engine.hpp>
#include <gpid/solver-interfaces/<%= @solver.name %>_problem.hpp>

namespace gpid {

    class <%= @solver.solverClass %>Internal;

    class <%= @solver.solverClass %>Interface
        : public AbstractSolverInterface<<%= @solver.contextManagerClass %>,
                                         <%= @solver.literalClass %>,
                                         <%= @solver.modelClass %>>
    {
        std::unique_ptr<<%= @solver.solverClass %>Internal> _internal;
    public:
        virtual void push() override;
        virtual void pop() override;
        virtual void addLiteral(LiteralT& lit, bool negate=false) override;
        virtual void addClause(HypothesisT& h, LiteralMapper<LiteralT>& mapper, bool negate=false) override;
        virtual SolverTestStatus check() override;
        virtual ModelT& getModel() override;

        virtual void printAssertions(bool negated) override;
        virtual const std::string getPrintableAssertions(bool negated) override;

        <%= @solver.solverClass %>Interface(<%= @solver.contextManagerClass %>& ctx);

        friend class <%= @solver.solverClass %>Engine;
    };

    /**
     * \brief Solver Interface for <%= @solver.name %> solver.
     * \ingroup gpid<%= @solver.name %>lib
     */
    class <%= @solver.solverClass %>Engine
        : public AbstractSolverEngine<<%= @solver.solverClass %>Interface,
                                      <%= @solver.problemClass %>,
                                      <%= @solver.declarationsClass %>>
    {
    public:
        <%= @solver.solverClass %>Engine();
        ~<%= @solver.solverClass %>Engine();
        virtual void printInfos() override;
        virtual void setProblem(ProblemT& problem) override;
        virtual void start() override;
    };

};

#endif
