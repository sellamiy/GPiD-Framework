/**
 * \file gpid/solver-interfaces/<%= @solver.name %>_inputs.hpp
 * \brief Input utilities <%= @solver.name %> Solver Interface.
 * \author Yanis Sellami
 * \date 2017
 */
#ifndef GPID_<%= @solver.name %>_INPUT_HANDLING_HPP
#define GPID_<%= @solver.name %>_INPUT_HANDLING_HPP

#include <gpid/solver-interfaces/<%= @solver.name %>_engine.hpp>

namespace gpid {

    /**
     * \brief Load a problem from a file.
     * \ingroup gpid<%= @solver.name %>lib
     * \param filename File to load.
     * \param ctx Context manager for building formulae representations.
     * \param pbl Target problem.
     * \param language input language for parsing the file.
     *
     * This function loads and parses the file then stores it in the
     * given problem instance.
     */
    extern void parse_file(std::string filename,
                           <%= @solver.contextManagerClass %>& ctx,
                           <%= @solver.problemClass %>& pbl,
                           std::string language);

    /**
     * \brief Obtain the number of abducibles hypotheses.
     * \ingroup gpid<%= @solver.name %>lib
     * \param opts Options defining the way to load/generate abducibles.
     * \param pbl The problem to analyze.
     * \return The number of abducibles hypotheses for this problem.
     */
    extern uint32_t countAbducibles(AbduciblesOptions& opts, <%= @solver.problemClass %>& pbl);

    /**
     * \brief Generate abducible hypotheses for a given problem.
     * \ingroup gpid<%= @solver.name %>lib
     * \param opts Options defining the way to load/generate abducibles.
     * \param ctx Context manager for building formulae representations.
     * \param decls Declared problem symbols to use for building abducibles.
     * \param hys Set of hypotheses to popuplate.
     *
     * Generate abducible hypotheses for the given problem and store them
     * in the given HypothesesEngine.
     */
    extern void generateAbducibles(AbduciblesOptions& opts,
                                   <%= @solver.contextManagerClass %>& ctx,
                                   <%= @solver.declarationsClass %>& decls,
                                   HypothesesEngine<<%= @solver.solverClass %>>& hys);

};

#endif
