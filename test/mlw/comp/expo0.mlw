module ExpoR0

 use int.Int
 use ref.Ref
 use int.EuclideanDivision
 use int.Power
 
 let main (n: int) (m: int) : int
  diverges
  requires { m >= 0 }
  ensures { result = power n m }
 = let p = ref 1 in
   let w = ref 0 in
 
  while !w < m do
   invariant { !p = power n !w /\ !w <= m /\ !w >= 0}
    p := !p * n;
    w := !w + 1
  done;
  
  !p

end