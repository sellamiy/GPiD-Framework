module MullerKahan

 use ref.Ref
 use ieee_float.Float64
 
 let main (unit) : unit

 = let ghost x0 = ref ( (of_int RNE 11) ./ (of_int RNE 2)) in
   let ghost x1 = ref ( (of_int RNE 61) ./ (of_int RNE 11)) in
   let ghost x2 = ref zeroF in
   
 for i = 0 to 99 do
 invariant { !x0 .>= (of_int RNE 99) }
  x2 := (of_int RNE 111) .- ((of_int RNE 1130) .- (of_int RNE 3000) ./ !x0) ./ !x1;
  x0 := !x1;
  x1 := !x2;
 done;
 
 assert { !x0 .>= (of_int RNE 99) /\ !x0 .<= (of_int RNE 101) }
 
end