module DIVE

 use int.Int
 use ref.Ref
 use int.Power
 use int.EuclideanDivision
 use list.List
 use list.Length
 use list.Nth
 use list.Append
 use option.Option
 
 let main (n: int) (d: int) : unit
  requires { n >= 0 /\ d > 0 }
  diverges
 = let powers = ref Nil in let doublings = ref Nil in
   let line = ref 0 in
   let ans = ref 0 in let acc = ref 0 in
   let i = ref 0 in
   
   while (d * power 2 !line <= n) do
     invariant { true }
     let p = power 2 !line in
      powers := !powers ++ (Cons p Nil);
      doublings := !doublings ++ (Cons (p * d) Nil);
      line := !line + 1
   done;
   
   i := (length !powers) - 1;
   
   while !i >= 0 do
     invariant { true }
     let dumd = match nth !i !doublings with | None -> 0 | Some w -> w end in
     let dump = match nth !i !powers with | None -> 0 | Some w -> w end in
     if !acc + dumd <= n then begin
       acc := !acc + dumd;
       ans := !ans + dump
     end;
     i := !i - 1
   done;
   
   assert { !ans = div n d };
   assert { n - !acc = mod n d }
   
end