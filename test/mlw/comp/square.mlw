module Simple

  use int.Int
  use ref.Ref
  
  function sqr (x:int) : int = x * x

  lemma sqr_non_neg: forall x:int. sqr x >= 0

  lemma sqr_increasing:
    forall x y:int. 0 <= x <= y -> sqr x <= sqr y

  lemma sqr_sum :
    forall x y : int. sqr(x+y) = sqr x + 2*x*y + sqr y

  predicate isqrt_spec (x res:int) =
    res >= 0 /\ sqr res <= x < sqr (res + 1)

  let isqrt (x:int) : int
    requires { x >= 0 }
    ensures { isqrt_spec x result }
    diverges
  = let count = ref 0 in
    let sum = ref 1 in
    while !sum <= x do
      invariant { true }
      (* !count >= 0 /\ x >= sqr !count /\ !sum = sqr (!count+1) *)
      count := !count + 1;
      sum := !sum + 2 * !count + 1
    done;
    !count

  let main ()
    ensures { result = 4 }
    diverges
  = isqrt 17

end