module Oopsla20
 use int.Int
 use ref.Ref

 val unknown (unit) : bool

 let main (x_s: int) (y_s: int) (k: int) (i: int) (n: int) : unit
  requires { (x_s + y_s) = k }
  diverges
 = let m = ref 0 in let j = ref 0 in
   let x = ref x_s in let y = ref y_s in

   while !j < n do
    invariant { !x + !y = k /\ !m >= 0 /\ !j >= 0 /\ (n > 0 -> !m < n) }

    if !j = i then begin
     x := !x + 1;
     y := !y - 1
    end else begin
     x := !x - 1;
     y := !y + 1
    end;

    if unknown() then m := !j;

    j := !j + 1;
   done;

   assert { (!x + !y) = k };

   if n > 0 then begin
    assert { 0 <= !m };
    assert { !m < n }
   end

end
