module Oopsla06
 use int.Int
 use ref.Ref
 use int.EuclideanDivision

 val unknown1 (unit) : bool
 val unknown2 (unit) : bool

 let main (flag: int) : unit
  diverges
 = let w = ref 1 in let z = ref 0 in let x = ref 0 in let y = ref 0 in

   while unknown1() do
    invariant { (((!x = !y))) /\ (((not ((mod !z 2) = 1)))) /\ (((not ((mod !w 2) = 0)))) } 

    while unknown2() do
     invariant { !x = !y }
     if mod !w 2 = 1 then x := !x + 1;
     if mod !z 2 = 0 then y := !y + 1;
    done;

    z := !x + !y;
    w := !z + 1;
   done;

   assert { !x = !y }

end
