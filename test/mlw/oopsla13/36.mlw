module Oopsla36
 use int.Int
 use ref.Ref
 use int.EuclideanDivision

 val unknown1 (unit) : bool
 val unknown2 (unit) : bool
 val unknown3 (unit) : bool

 let main(flag: bool) : unit diverges
 =
  let a = ref 0 in
  let b = ref 0 in
  let x = ref 0 in
  let y = ref 0 in
  let z = ref 0 in
  let w = ref 0 in

  while unknown1() do invariant { true }
    let i = ref !z in
    let j = ref !w in
    let k = ref 0 in
    while !i < !j do invariant { true }
      k := !k + 1;
      i := !i + 1;
    done;

    x := !z;
    y := !k;

    if mod !x 2 = 1 then
    begin
      x := !x + 1;
      y := !y - 1;
    end;

    while unknown2() do invariant { true } 
      if mod !x 2 = 0 then
      begin
        x := !x + 2;
        y := !y - 2;
      end
      else
      begin
        x := !x - 1;
        y := !y - 1;
      end
    done;
    z := !z + 1;
    w := !x + !y + 1;
  done;

  let c = ref 0 in 
  let d = ref 0 in
  while unknown3() do invariant { true }
    c := !c + 1;
    d := !d + 1;
    if flag then
    begin
      a := !a + 1;
      b := !b + 1;
    end
    else
    begin
      a := !a + !c;
      b := !b + !d;
    end
  done;
  assert { !w >= !z /\ !a - ! b = 0 }

end
