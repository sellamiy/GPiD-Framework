module EuclideanAlgorithmIterative

 use mach.int.Int
 use ref.Ref
 use number.Gcd

 let euclid (us : int) (vs : int) : int

   requires { us >= 0 /\ vs >= 0 }
   ensures { result = gcd us vs }
   diverges

 = let u = ref us in let v = ref vs in
   while !v <> 0 do
    invariant { true }

    let tmp = !v in
     v := !u % !v;
     u := tmp
   done;
   !u

end
