module List2

 use int.Int
 use ref.Ref
 use list.List
 use list.Length
 use list.HdTlNoOpt
 use list.NthNoOpt
 use list.Append
 
 let main (l: list int) (i: int) : unit
  diverges
  requires { i < length l /\ length l > 0 /\ i >= 0 }
  
 = let p = ref 0 in let ghost dec = ref l in
   (* Fails ; May be wrong *)
 
   while !p <> i do
    invariant { hd !dec = nth !p l }
    dec := tl !dec;
    p := !p + 1
   done;
   
   assert { hd !dec = nth i l }
   
end