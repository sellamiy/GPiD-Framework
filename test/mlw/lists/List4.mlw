module List4

 use int.Int
 use ref.Ref
 use list.List
 use list.Length
 use list.HdTlNoOpt
 use list.NthNoOpt
 use list.Append
 
 let main (l: list int) (i: int) (j: int) : unit
  diverges
  requires { i < length l /\ j < length l /\ i >= 0 /\ j >= 0 }
  
 = let p = ref 0 in
   let ghost dec = ref Nil in
   let t = ref 0 in
 
   while !p < length l do
    invariant { ((!p >= i \/ !p >= j) -> nth i !dec = nth j l) /\ !p = length !dec }
    (* Probably fails *)
    if !p = i then
      dec := !dec ++ Cons (nth j l) Nil
    else if !p = j then
      dec := !dec ++ Cons (nth i l) Nil
    else
      dec := !dec ++ Cons (nth !p l) Nil;
    p := !p + 1
   done;
   
   assert { nth i !dec = nth j l };
   assert { nth j !dec = nth i l }
   
end