module Loop11

 use int.Int
 use ref.Ref
 use real.Real
 (*
 use ieee_float.Float32
 use ieee_float.GenericFloat
 *)
 
 val undet_float (unit) : real
 val undet_int (unit) : int
 
 let main (x: real) : unit
  requires { x > -1.0 }
  requires { x < 1.0 }
  diverges
  
 = let ghost exp = ref 1.0 in
   let ghost term = ref 1.0 in
   let ghost count = ref 1.0 in
   let temp = ref 1 in
   let result = 2.0 * (1.0 / (1.0 - x)) in
   
   while !temp <> 0 do
   invariant { true }
    term := !term * (x / !count);
    exp := !exp + !term;
    count := !count + 1.0;
    temp := undet_int()
   done;
   
   assert { result >= !exp }
   
end
   