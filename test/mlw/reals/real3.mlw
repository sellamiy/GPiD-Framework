module Real0

 (* Requires CVC4 *)

 use int.Int
 use real.RealInfix
 use real.FromInt
 use int.Exponentiation
 use ref.Ref
 
 val function power real int : real
 
 axiom P_0_R : forall x: real. power x 0 = 1.0
 
 let main (unit) (mem : real) (dem : int) : unit
 requires { dem >= 0 }
  diverges
 =
 
 let res = ref 0.0 in
 let i = ref 0 in
 
 while !i < dem do
  invariant { !res = (from_int !i) *. mem /\ !i <= dem }
  res := !res +. mem;
  i := !i + 1
 done;
 
 let j = ref 0 in
 let mg = ref 1.0 in
 
 while !j < dem do
  invariant { !mg = power !res !j /\ !j <= dem /\ !j >= 0 } (* Unfinished *)
  mg := !mg *. !res;
  j := !j + 1
 done;
 
 assert { !mg = power ((from_int dem) *. mem) dem }
 
end