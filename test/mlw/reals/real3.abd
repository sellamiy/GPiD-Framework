(size auto)

(declare dem i j as int)
(declare mg mem res (from_int j) (from_int i) (from_int dem) as real)
(declare 0 as const)

(annotate real mem res mg)

(reference res i j mg)

(lambda power (n m) (power n m))
(lambda sqrt (v) (sqr v))

(lambda eq (l r) (= l r))
(lambda neq (l r) (distinct l r))
(lambda ge (l r) (>= l r))
(lambda gt (l r) (> l r))
(lambda le (l r) (<= l r))
(lambda lt (l r) (< l r))

(lambda iplus (l r) (+ l r))
(lambda imult (l r) (* l r))

(apply imult (over real real) real symmetric)
(apply power (over real int) real)
(copy const as int)

(apply eq (over real real) bf symmetric)
(apply le (over real real) bf nonself)
(apply lt (over real real) bf nonself)

(apply eq (over int int) bf symmetric)
(apply le (over int int) bf nonself)
(apply lt (over int int) bf nonself)

(extend bf)
