module BinaryMultiplication

  use int.Int
  use int.EuclideanDivision
  use ref.Ref

  let binary_mult (a b: int) : int
    requires { b >= 0 }
    ensures  { result = a * b }
    diverges
  = let x = ref a in
    let y = ref b in
    let z = ref 0 in
    while !y <> 0 do
      invariant { a * b = !z + !x * !y }
      if mod !y 2 = 1 then z := !z + !x;
      x := 2 * !x;
      y := div !y 2
    done;
    !z

end
