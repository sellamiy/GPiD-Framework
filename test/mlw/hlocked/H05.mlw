module H05

  use int.Int
  use ref.Ref

  (* Exercise: Factorial *)

  function fact int : int
  axiom fact_0 : fact 0 = 1
  axiom fact_n : forall n:int. 0 < n -> fact n = n * fact (n-1)

  let factorial (x: ref int) (y: ref int) (z: ref int)
    requires { !x >= 0 } ensures { !y = fact !x }
    diverges
  = y := 1;
    z := !x;
    while !z <> 0 do
      (* Solution: 0 <= !z /\ !y * fact !z = fact !x *)
      invariant { 0 <= !z /\ !y * fact !z = fact !x }
      y := !y * !z;
      z := !z - 1
    done

end