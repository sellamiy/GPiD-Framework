/**
 * \file snlog/snlog.hpp
 * \brief Simple-Nim Logging Library.
 * \author Yanis Sellami
 * \date 2017
 */
#ifndef LIB_SNLOG__HEADER
#define LIB_SNLOG__HEADER

#include <iostream>

#cmakedefine USE_ANSI_COLORS

#define SNLOG_VERSION_MAJOR 0
#define SNLOG_VERSION_MINOR 1

namespace snlog {

#ifdef USE_ANSI_COLORS

#define s_nfg_blk "\033[0;30m"
#define s_nfg_red "\033[0;31m"
#define s_nfg_gre "\033[0;32m"
#define s_nfg_ylw "\033[0;33m"
#define s_nfg_blu "\033[0;34m"
#define s_nfg_mag "\033[0;35m"
#define s_nfg_cya "\033[0;36m"
#define s_nfg_wit "\033[0;37m"

#define s_bfg_blk "\033[1;30m"
#define s_bfg_red "\033[1;31m"
#define s_bfg_gre "\033[1;32m"
#define s_bfg_ylw "\033[1;33m"
#define s_bfg_blu "\033[1;34m"
#define s_bfg_mag "\033[1;35m"
#define s_bfg_cya "\033[1;36m"
#define s_bfg_wit "\033[1;37m"

#define s_nbg_blk "\033[0;40m"
#define s_nbg_red "\033[0;41m"
#define s_nbg_gre "\033[0;42m"
#define s_nbg_ylw "\033[0;43m"
#define s_nbg_blu "\033[0;44m"
#define s_nbg_mag "\033[0;45m"
#define s_nbg_cya "\033[0;46m"
#define s_nbg_wit "\033[0;47m"

#define s_reset   "\033[0m"

    inline std::ostream& l_end(std::ostream& os) { return os << s_reset << std::endl; }

    inline std::ostream& l_message (std::ostream& os) { return os << "-- "; }
    inline std::ostream& l_info    (std::ostream& os) { return os << s_bfg_blu << "INFO: "     << s_reset; }
    inline std::ostream& l_warn    (std::ostream& os) { return os << s_bfg_ylw << "WARNING: "  << s_reset; }
    inline std::ostream& l_error   (std::ostream& os) { return os << s_bfg_red << "ERROR: "    << s_reset; }
    inline std::ostream& l_internal(std::ostream& os) { return os << s_bfg_mag << "INTERNAL: " << s_reset; }
    inline std::ostream& l_fatal   (std::ostream& os) { return os << s_bfg_red << "FATAL: "    << s_nfg_red; }
    inline std::ostream& l_notif   (std::ostream& os) { return os << s_bfg_cya << "-- "; }
    inline std::ostream& l_notifg  (std::ostream& os) { return os << s_bfg_gre << "-- "; }
#else
    inline std::ostream& l_end(std::ostream& os) { return os << std::endl; }

    inline std::ostream& l_message (std::ostream& os) { return os << "-- "; }
    inline std::ostream& l_info    (std::ostream& os) { return os << "INFO: "; }
    inline std::ostream& l_warn    (std::ostream& os) { return os << "WARNING: "; }
    inline std::ostream& l_error   (std::ostream& os) { return os << "ERROR: "; }
    inline std::ostream& l_internal(std::ostream& os) { return os << "INTERNAL: "; }
    inline std::ostream& l_fatal   (std::ostream& os) { return os << "FATAL: "; }
    inline std::ostream& l_notif   (std::ostream& os) { return os << "-- "; }
    inline std::ostream& l_notifg  (std::ostream& os) { return os << "-- "; }
#endif
    inline std::ostream& l_raw     (std::ostream& os) { return os; }

    inline std::ostream& l_message()  { return l_message (std::cerr); }
    inline std::ostream& l_info()     { return l_info    (std::cerr); }
    inline std::ostream& l_warn()     { return l_warn    (std::cerr); }
    inline std::ostream& l_error()    { return l_error   (std::cerr); }
    inline std::ostream& l_internal() { return l_internal(std::cerr); }
    inline std::ostream& l_fatal()    { return l_fatal   (std::cerr); }
    inline std::ostream& l_notif()    { return l_notif   (std::cerr); }
    inline std::ostream& l_notifg()   { return l_notifg  (std::cerr); }
    inline std::ostream& l_raw()      { return l_raw     (std::cerr); }

    struct l_nimbuf : public std::streambuf
    { virtual int overflow(int c) override { return c; } };
    struct l_nimstr : public std::ostream
    { public: l_nimstr() : std::ostream(&m_sb) {} private: l_nimbuf m_sb; };
    static l_nimstr l_null;

    inline std::ostream& t_raw     (bool test) { return test ? l_raw()      : l_null; }

    inline std::ostream& t_message (bool test) { return test ? l_message()  : l_null; }
    inline std::ostream& t_info    (bool test) { return test ? l_info()     : l_null; }
    inline std::ostream& t_warn    (bool test) { return test ? l_warn()     : l_null; }
    inline std::ostream& t_error   (bool test) { return test ? l_error()    : l_null; }
    inline std::ostream& t_internal(bool test) { return test ? l_internal() : l_null; }
    inline std::ostream& t_fatal   (bool test) { return test ? l_fatal()    : l_null; }
};

#endif
